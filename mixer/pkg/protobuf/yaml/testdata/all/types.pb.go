// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/pkg/protobuf/yaml/testdata/all/types.proto

/*
	Package foo is a generated protocol buffer package.

	It is generated from these files:
		mixer/pkg/protobuf/yaml/testdata/all/types.proto

	It has these top-level messages:
		Empty
		Simple
		Other
		Outer
*/
package foo

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Myenum int32

const (
	ONE   Myenum = 0
	TWO   Myenum = 1
	THREE Myenum = 2
)

var Myenum_name = map[int32]string{
	0: "ONE",
	1: "TWO",
	2: "THREE",
}
var Myenum_value = map[string]int32{
	"ONE":   0,
	"TWO":   1,
	"THREE": 2,
}

func (Myenum) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type OtherInnerenum int32

const (
	INNERONE   OtherInnerenum = 0
	INNERTWO   OtherInnerenum = 1
	INNERTHREE OtherInnerenum = 2
)

var OtherInnerenum_name = map[int32]string{
	0: "INNERONE",
	1: "INNERTWO",
	2: "INNERTHREE",
}
var OtherInnerenum_value = map[string]int32{
	"INNERONE":   0,
	"INNERTWO":   1,
	"INNERTHREE": 2,
}

func (OtherInnerenum) EnumDescriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{0} }

type Simple struct {
	Str  string  `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Dbl  float64 `protobuf:"fixed64,2,opt,name=dbl,proto3" json:"dbl,omitempty"`
	I64  int64   `protobuf:"varint,3,opt,name=i64,proto3" json:"i64,omitempty"`
	B    bool    `protobuf:"varint,4,opt,name=b,proto3" json:"b,omitempty"`
	Ui64 uint64  `protobuf:"varint,5,opt,name=ui64,proto3" json:"ui64,omitempty"`
	Flt  float32 `protobuf:"fixed32,6,opt,name=flt,proto3" json:"flt,omitempty"`
	I32  int32   `protobuf:"varint,7,opt,name=i32,proto3" json:"i32,omitempty"`
	Ui32 uint32  `protobuf:"varint,8,opt,name=ui32,proto3" json:"ui32,omitempty"`
	F32  uint32  `protobuf:"fixed32,9,opt,name=f32,proto3" json:"f32,omitempty"`
	F64  uint64  `protobuf:"fixed64,10,opt,name=f64,proto3" json:"f64,omitempty"`
	Oth  *Other  `protobuf:"bytes,11,opt,name=oth" json:"oth,omitempty"`
	Byts []byte  `protobuf:"bytes,12,opt,name=byts,proto3" json:"byts,omitempty"`
	Enm  Myenum  `protobuf:"varint,13,opt,name=enm,proto3,enum=foo.Myenum" json:"enm,omitempty"`
	Sf32 int32   `protobuf:"fixed32,14,opt,name=sf32,proto3" json:"sf32,omitempty"`
	Sf64 int64   `protobuf:"fixed64,15,opt,name=sf64,proto3" json:"sf64,omitempty"`
	Si32 int32   `protobuf:"zigzag32,16,opt,name=si32,proto3" json:"si32,omitempty"`
	Si64 int64   `protobuf:"zigzag64,17,opt,name=si64,proto3" json:"si64,omitempty"`
	// complex types
	MapStrStr  map[string]string `protobuf:"bytes,18,rep,name=map_str_str,json=mapStrStr" json:"map_str_str,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStrMsg  map[string]*Other `protobuf:"bytes,19,rep,name=map_str_msg,json=mapStrMsg" json:"map_str_msg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	MapI32Msg  map[int32]*Other  `protobuf:"bytes,20,rep,name=map_i32_msg,json=mapI32Msg" json:"map_i32_msg,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	MapStrEnum map[string]Myenum `protobuf:"bytes,21,rep,name=map_str_enum,json=mapStrEnum" json:"map_str_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=foo.Myenum"`
	RStr       []string          `protobuf:"bytes,22,rep,name=r_str,json=rStr" json:"r_str,omitempty"`
	RMsg       []*Other          `protobuf:"bytes,23,rep,name=r_msg,json=rMsg" json:"r_msg,omitempty"`
	RI32       []int32           `protobuf:"varint,24,rep,packed,name=r_i32,json=rI32" json:"r_i32,omitempty"`
	REnm       []Myenum          `protobuf:"varint,25,rep,packed,name=r_enm,json=rEnm,enum=foo.Myenum" json:"r_enm,omitempty"`
}

func (m *Simple) Reset()                    { *m = Simple{} }
func (*Simple) ProtoMessage()               {}
func (*Simple) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{1} }

func (m *Simple) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Simple) GetDbl() float64 {
	if m != nil {
		return m.Dbl
	}
	return 0
}

func (m *Simple) GetI64() int64 {
	if m != nil {
		return m.I64
	}
	return 0
}

func (m *Simple) GetB() bool {
	if m != nil {
		return m.B
	}
	return false
}

func (m *Simple) GetUi64() uint64 {
	if m != nil {
		return m.Ui64
	}
	return 0
}

func (m *Simple) GetFlt() float32 {
	if m != nil {
		return m.Flt
	}
	return 0
}

func (m *Simple) GetI32() int32 {
	if m != nil {
		return m.I32
	}
	return 0
}

func (m *Simple) GetUi32() uint32 {
	if m != nil {
		return m.Ui32
	}
	return 0
}

func (m *Simple) GetF32() uint32 {
	if m != nil {
		return m.F32
	}
	return 0
}

func (m *Simple) GetF64() uint64 {
	if m != nil {
		return m.F64
	}
	return 0
}

func (m *Simple) GetOth() *Other {
	if m != nil {
		return m.Oth
	}
	return nil
}

func (m *Simple) GetByts() []byte {
	if m != nil {
		return m.Byts
	}
	return nil
}

func (m *Simple) GetEnm() Myenum {
	if m != nil {
		return m.Enm
	}
	return ONE
}

func (m *Simple) GetSf32() int32 {
	if m != nil {
		return m.Sf32
	}
	return 0
}

func (m *Simple) GetSf64() int64 {
	if m != nil {
		return m.Sf64
	}
	return 0
}

func (m *Simple) GetSi32() int32 {
	if m != nil {
		return m.Si32
	}
	return 0
}

func (m *Simple) GetSi64() int64 {
	if m != nil {
		return m.Si64
	}
	return 0
}

func (m *Simple) GetMapStrStr() map[string]string {
	if m != nil {
		return m.MapStrStr
	}
	return nil
}

func (m *Simple) GetMapStrMsg() map[string]*Other {
	if m != nil {
		return m.MapStrMsg
	}
	return nil
}

func (m *Simple) GetMapI32Msg() map[int32]*Other {
	if m != nil {
		return m.MapI32Msg
	}
	return nil
}

func (m *Simple) GetMapStrEnum() map[string]Myenum {
	if m != nil {
		return m.MapStrEnum
	}
	return nil
}

func (m *Simple) GetRStr() []string {
	if m != nil {
		return m.RStr
	}
	return nil
}

func (m *Simple) GetRMsg() []*Other {
	if m != nil {
		return m.RMsg
	}
	return nil
}

func (m *Simple) GetRI32() []int32 {
	if m != nil {
		return m.RI32
	}
	return nil
}

func (m *Simple) GetREnm() []Myenum {
	if m != nil {
		return m.REnm
	}
	return nil
}

type Other struct {
	Str    string         `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Dbl    float64        `protobuf:"fixed64,2,opt,name=dbl,proto3" json:"dbl,omitempty"`
	I64    int64          `protobuf:"varint,3,opt,name=i64,proto3" json:"i64,omitempty"`
	B      bool           `protobuf:"varint,4,opt,name=b,proto3" json:"b,omitempty"`
	Inenum OtherInnerenum `protobuf:"varint,5,opt,name=inenum,proto3,enum=foo.OtherInnerenum" json:"inenum,omitempty"`
	Inmsg  *OtherInnerMsg `protobuf:"bytes,6,opt,name=inmsg" json:"inmsg,omitempty"`
}

func (m *Other) Reset()                    { *m = Other{} }
func (*Other) ProtoMessage()               {}
func (*Other) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2} }

func (m *Other) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Other) GetDbl() float64 {
	if m != nil {
		return m.Dbl
	}
	return 0
}

func (m *Other) GetI64() int64 {
	if m != nil {
		return m.I64
	}
	return 0
}

func (m *Other) GetB() bool {
	if m != nil {
		return m.B
	}
	return false
}

func (m *Other) GetInenum() OtherInnerenum {
	if m != nil {
		return m.Inenum
	}
	return INNERONE
}

func (m *Other) GetInmsg() *OtherInnerMsg {
	if m != nil {
		return m.Inmsg
	}
	return nil
}

type OtherInnerMsg struct {
	Str string  `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Dbl float64 `protobuf:"fixed64,2,opt,name=dbl,proto3" json:"dbl,omitempty"`
	I64 int64   `protobuf:"varint,3,opt,name=i64,proto3" json:"i64,omitempty"`
}

func (m *OtherInnerMsg) Reset()                    { *m = OtherInnerMsg{} }
func (*OtherInnerMsg) ProtoMessage()               {}
func (*OtherInnerMsg) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{2, 0} }

func (m *OtherInnerMsg) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *OtherInnerMsg) GetDbl() float64 {
	if m != nil {
		return m.Dbl
	}
	return 0
}

func (m *OtherInnerMsg) GetI64() int64 {
	if m != nil {
		return m.I64
	}
	return 0
}

type Outer struct {
	In *Outer_Inner `protobuf:"bytes,1,opt,name=in" json:"in,omitempty"`
}

func (m *Outer) Reset()                    { *m = Outer{} }
func (*Outer) ProtoMessage()               {}
func (*Outer) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3} }

func (m *Outer) GetIn() *Outer_Inner {
	if m != nil {
		return m.In
	}
	return nil
}

type Outer_Inner struct {
	Str string  `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Dbl float64 `protobuf:"fixed64,2,opt,name=dbl,proto3" json:"dbl,omitempty"`
	I64 int64   `protobuf:"varint,3,opt,name=i64,proto3" json:"i64,omitempty"`
	B   bool    `protobuf:"varint,4,opt,name=b,proto3" json:"b,omitempty"`
}

func (m *Outer_Inner) Reset()                    { *m = Outer_Inner{} }
func (*Outer_Inner) ProtoMessage()               {}
func (*Outer_Inner) Descriptor() ([]byte, []int) { return fileDescriptorTypes, []int{3, 0} }

func (m *Outer_Inner) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Outer_Inner) GetDbl() float64 {
	if m != nil {
		return m.Dbl
	}
	return 0
}

func (m *Outer_Inner) GetI64() int64 {
	if m != nil {
		return m.I64
	}
	return 0
}

func (m *Outer_Inner) GetB() bool {
	if m != nil {
		return m.B
	}
	return false
}

func init() {
	proto.RegisterType((*Empty)(nil), "foo.Empty")
	proto.RegisterType((*Simple)(nil), "foo.Simple")
	proto.RegisterType((*Other)(nil), "foo.other")
	proto.RegisterType((*OtherInnerMsg)(nil), "foo.other.innerMsg")
	proto.RegisterType((*Outer)(nil), "foo.Outer")
	proto.RegisterType((*Outer_Inner)(nil), "foo.Outer.Inner")
	proto.RegisterEnum("foo.Myenum", Myenum_name, Myenum_value)
	proto.RegisterEnum("foo.OtherInnerenum", OtherInnerenum_name, OtherInnerenum_value)
}
func (x Myenum) String() string {
	s, ok := Myenum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x OtherInnerenum) String() string {
	s, ok := OtherInnerenum_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Empty) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Empty)
	if !ok {
		that2, ok := that.(Empty)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *Simple) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Simple)
	if !ok {
		that2, ok := that.(Simple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	if this.Dbl != that1.Dbl {
		return false
	}
	if this.I64 != that1.I64 {
		return false
	}
	if this.B != that1.B {
		return false
	}
	if this.Ui64 != that1.Ui64 {
		return false
	}
	if this.Flt != that1.Flt {
		return false
	}
	if this.I32 != that1.I32 {
		return false
	}
	if this.Ui32 != that1.Ui32 {
		return false
	}
	if this.F32 != that1.F32 {
		return false
	}
	if this.F64 != that1.F64 {
		return false
	}
	if !this.Oth.Equal(that1.Oth) {
		return false
	}
	if !bytes.Equal(this.Byts, that1.Byts) {
		return false
	}
	if this.Enm != that1.Enm {
		return false
	}
	if this.Sf32 != that1.Sf32 {
		return false
	}
	if this.Sf64 != that1.Sf64 {
		return false
	}
	if this.Si32 != that1.Si32 {
		return false
	}
	if this.Si64 != that1.Si64 {
		return false
	}
	if len(this.MapStrStr) != len(that1.MapStrStr) {
		return false
	}
	for i := range this.MapStrStr {
		if this.MapStrStr[i] != that1.MapStrStr[i] {
			return false
		}
	}
	if len(this.MapStrMsg) != len(that1.MapStrMsg) {
		return false
	}
	for i := range this.MapStrMsg {
		if !this.MapStrMsg[i].Equal(that1.MapStrMsg[i]) {
			return false
		}
	}
	if len(this.MapI32Msg) != len(that1.MapI32Msg) {
		return false
	}
	for i := range this.MapI32Msg {
		if !this.MapI32Msg[i].Equal(that1.MapI32Msg[i]) {
			return false
		}
	}
	if len(this.MapStrEnum) != len(that1.MapStrEnum) {
		return false
	}
	for i := range this.MapStrEnum {
		if this.MapStrEnum[i] != that1.MapStrEnum[i] {
			return false
		}
	}
	if len(this.RStr) != len(that1.RStr) {
		return false
	}
	for i := range this.RStr {
		if this.RStr[i] != that1.RStr[i] {
			return false
		}
	}
	if len(this.RMsg) != len(that1.RMsg) {
		return false
	}
	for i := range this.RMsg {
		if !this.RMsg[i].Equal(that1.RMsg[i]) {
			return false
		}
	}
	if len(this.RI32) != len(that1.RI32) {
		return false
	}
	for i := range this.RI32 {
		if this.RI32[i] != that1.RI32[i] {
			return false
		}
	}
	if len(this.REnm) != len(that1.REnm) {
		return false
	}
	for i := range this.REnm {
		if this.REnm[i] != that1.REnm[i] {
			return false
		}
	}
	return true
}
func (this *Other) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Other)
	if !ok {
		that2, ok := that.(Other)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	if this.Dbl != that1.Dbl {
		return false
	}
	if this.I64 != that1.I64 {
		return false
	}
	if this.B != that1.B {
		return false
	}
	if this.Inenum != that1.Inenum {
		return false
	}
	if !this.Inmsg.Equal(that1.Inmsg) {
		return false
	}
	return true
}
func (this *OtherInnerMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*OtherInnerMsg)
	if !ok {
		that2, ok := that.(OtherInnerMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	if this.Dbl != that1.Dbl {
		return false
	}
	if this.I64 != that1.I64 {
		return false
	}
	return true
}
func (this *Outer) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Outer)
	if !ok {
		that2, ok := that.(Outer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.In.Equal(that1.In) {
		return false
	}
	return true
}
func (this *Outer_Inner) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Outer_Inner)
	if !ok {
		that2, ok := that.(Outer_Inner)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	if this.Dbl != that1.Dbl {
		return false
	}
	if this.I64 != that1.I64 {
		return false
	}
	if this.B != that1.B {
		return false
	}
	return true
}
func (this *Empty) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&foo.Empty{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Simple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 29)
	s = append(s, "&foo.Simple{")
	s = append(s, "Str: "+fmt.Sprintf("%#v", this.Str)+",\n")
	s = append(s, "Dbl: "+fmt.Sprintf("%#v", this.Dbl)+",\n")
	s = append(s, "I64: "+fmt.Sprintf("%#v", this.I64)+",\n")
	s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	s = append(s, "Ui64: "+fmt.Sprintf("%#v", this.Ui64)+",\n")
	s = append(s, "Flt: "+fmt.Sprintf("%#v", this.Flt)+",\n")
	s = append(s, "I32: "+fmt.Sprintf("%#v", this.I32)+",\n")
	s = append(s, "Ui32: "+fmt.Sprintf("%#v", this.Ui32)+",\n")
	s = append(s, "F32: "+fmt.Sprintf("%#v", this.F32)+",\n")
	s = append(s, "F64: "+fmt.Sprintf("%#v", this.F64)+",\n")
	if this.Oth != nil {
		s = append(s, "Oth: "+fmt.Sprintf("%#v", this.Oth)+",\n")
	}
	s = append(s, "Byts: "+fmt.Sprintf("%#v", this.Byts)+",\n")
	s = append(s, "Enm: "+fmt.Sprintf("%#v", this.Enm)+",\n")
	s = append(s, "Sf32: "+fmt.Sprintf("%#v", this.Sf32)+",\n")
	s = append(s, "Sf64: "+fmt.Sprintf("%#v", this.Sf64)+",\n")
	s = append(s, "Si32: "+fmt.Sprintf("%#v", this.Si32)+",\n")
	s = append(s, "Si64: "+fmt.Sprintf("%#v", this.Si64)+",\n")
	keysForMapStrStr := make([]string, 0, len(this.MapStrStr))
	for k, _ := range this.MapStrStr {
		keysForMapStrStr = append(keysForMapStrStr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMapStrStr)
	mapStringForMapStrStr := "map[string]string{"
	for _, k := range keysForMapStrStr {
		mapStringForMapStrStr += fmt.Sprintf("%#v: %#v,", k, this.MapStrStr[k])
	}
	mapStringForMapStrStr += "}"
	if this.MapStrStr != nil {
		s = append(s, "MapStrStr: "+mapStringForMapStrStr+",\n")
	}
	keysForMapStrMsg := make([]string, 0, len(this.MapStrMsg))
	for k, _ := range this.MapStrMsg {
		keysForMapStrMsg = append(keysForMapStrMsg, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMapStrMsg)
	mapStringForMapStrMsg := "map[string]*Other{"
	for _, k := range keysForMapStrMsg {
		mapStringForMapStrMsg += fmt.Sprintf("%#v: %#v,", k, this.MapStrMsg[k])
	}
	mapStringForMapStrMsg += "}"
	if this.MapStrMsg != nil {
		s = append(s, "MapStrMsg: "+mapStringForMapStrMsg+",\n")
	}
	keysForMapI32Msg := make([]int32, 0, len(this.MapI32Msg))
	for k, _ := range this.MapI32Msg {
		keysForMapI32Msg = append(keysForMapI32Msg, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMapI32Msg)
	mapStringForMapI32Msg := "map[int32]*Other{"
	for _, k := range keysForMapI32Msg {
		mapStringForMapI32Msg += fmt.Sprintf("%#v: %#v,", k, this.MapI32Msg[k])
	}
	mapStringForMapI32Msg += "}"
	if this.MapI32Msg != nil {
		s = append(s, "MapI32Msg: "+mapStringForMapI32Msg+",\n")
	}
	keysForMapStrEnum := make([]string, 0, len(this.MapStrEnum))
	for k, _ := range this.MapStrEnum {
		keysForMapStrEnum = append(keysForMapStrEnum, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMapStrEnum)
	mapStringForMapStrEnum := "map[string]Myenum{"
	for _, k := range keysForMapStrEnum {
		mapStringForMapStrEnum += fmt.Sprintf("%#v: %#v,", k, this.MapStrEnum[k])
	}
	mapStringForMapStrEnum += "}"
	if this.MapStrEnum != nil {
		s = append(s, "MapStrEnum: "+mapStringForMapStrEnum+",\n")
	}
	s = append(s, "RStr: "+fmt.Sprintf("%#v", this.RStr)+",\n")
	if this.RMsg != nil {
		s = append(s, "RMsg: "+fmt.Sprintf("%#v", this.RMsg)+",\n")
	}
	s = append(s, "RI32: "+fmt.Sprintf("%#v", this.RI32)+",\n")
	s = append(s, "REnm: "+fmt.Sprintf("%#v", this.REnm)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Other) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&foo.Other{")
	s = append(s, "Str: "+fmt.Sprintf("%#v", this.Str)+",\n")
	s = append(s, "Dbl: "+fmt.Sprintf("%#v", this.Dbl)+",\n")
	s = append(s, "I64: "+fmt.Sprintf("%#v", this.I64)+",\n")
	s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	s = append(s, "Inenum: "+fmt.Sprintf("%#v", this.Inenum)+",\n")
	if this.Inmsg != nil {
		s = append(s, "Inmsg: "+fmt.Sprintf("%#v", this.Inmsg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OtherInnerMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&foo.OtherInnerMsg{")
	s = append(s, "Str: "+fmt.Sprintf("%#v", this.Str)+",\n")
	s = append(s, "Dbl: "+fmt.Sprintf("%#v", this.Dbl)+",\n")
	s = append(s, "I64: "+fmt.Sprintf("%#v", this.I64)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Outer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&foo.Outer{")
	if this.In != nil {
		s = append(s, "In: "+fmt.Sprintf("%#v", this.In)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Outer_Inner) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&foo.Outer_Inner{")
	s = append(s, "Str: "+fmt.Sprintf("%#v", this.Str)+",\n")
	s = append(s, "Dbl: "+fmt.Sprintf("%#v", this.Dbl)+",\n")
	s = append(s, "I64: "+fmt.Sprintf("%#v", this.I64)+",\n")
	s = append(s, "B: "+fmt.Sprintf("%#v", this.B)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Simple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Simple) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if m.Dbl != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dbl))))
		i += 8
	}
	if m.I64 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.I64))
	}
	if m.B {
		dAtA[i] = 0x20
		i++
		if m.B {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ui64 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Ui64))
	}
	if m.Flt != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Flt))))
		i += 4
	}
	if m.I32 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.I32))
	}
	if m.Ui32 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Ui32))
	}
	if m.F32 != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.F32))
		i += 4
	}
	if m.F64 != 0 {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.F64))
		i += 8
	}
	if m.Oth != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Oth.Size()))
		n1, err := m.Oth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Byts) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Byts)))
		i += copy(dAtA[i:], m.Byts)
	}
	if m.Enm != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Enm))
	}
	if m.Sf32 != 0 {
		dAtA[i] = 0x75
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Sf32))
		i += 4
	}
	if m.Sf64 != 0 {
		dAtA[i] = 0x79
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Sf64))
		i += 8
	}
	if m.Si32 != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64((uint32(m.Si32)<<1)^uint32((m.Si32>>31))))
	}
	if m.Si64 != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64((uint64(m.Si64)<<1)^uint64((m.Si64>>63))))
	}
	if len(m.MapStrStr) > 0 {
		for k, _ := range m.MapStrStr {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			v := m.MapStrStr[k]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.MapStrMsg) > 0 {
		for k, _ := range m.MapStrMsg {
			dAtA[i] = 0x9a
			i++
			dAtA[i] = 0x1
			i++
			v := m.MapStrMsg[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if len(m.MapI32Msg) > 0 {
		for k, _ := range m.MapI32Msg {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x1
			i++
			v := m.MapI32Msg[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTypes(uint64(msgSize))
			}
			mapSize := 1 + sovTypes(uint64(k)) + msgSize
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTypes(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTypes(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if len(m.MapStrEnum) > 0 {
		for k, _ := range m.MapStrEnum {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			v := m.MapStrEnum[k]
			mapSize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + sovTypes(uint64(v))
			i = encodeVarintTypes(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintTypes(dAtA, i, uint64(v))
		}
	}
	if len(m.RStr) > 0 {
		for _, s := range m.RStr {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.RMsg) > 0 {
		for _, msg := range m.RMsg {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintTypes(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RI32) > 0 {
		dAtA5 := make([]byte, len(m.RI32)*10)
		var j4 int
		for _, num1 := range m.RI32 {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.REnm) > 0 {
		dAtA7 := make([]byte, len(m.REnm)*10)
		var j6 int
		for _, num := range m.REnm {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTypes(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *Other) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Other) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if m.Dbl != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dbl))))
		i += 8
	}
	if m.I64 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.I64))
	}
	if m.B {
		dAtA[i] = 0x20
		i++
		if m.B {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Inenum != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Inenum))
	}
	if m.Inmsg != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Inmsg.Size()))
		n8, err := m.Inmsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *OtherInnerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherInnerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if m.Dbl != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dbl))))
		i += 8
	}
	if m.I64 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.I64))
	}
	return i, nil
}

func (m *Outer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.In != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.In.Size()))
		n9, err := m.In.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *Outer_Inner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Outer_Inner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if m.Dbl != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Dbl))))
		i += 8
	}
	if m.I64 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.I64))
	}
	if m.B {
		dAtA[i] = 0x20
		i++
		if m.B {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Simple) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Dbl != 0 {
		n += 9
	}
	if m.I64 != 0 {
		n += 1 + sovTypes(uint64(m.I64))
	}
	if m.B {
		n += 2
	}
	if m.Ui64 != 0 {
		n += 1 + sovTypes(uint64(m.Ui64))
	}
	if m.Flt != 0 {
		n += 5
	}
	if m.I32 != 0 {
		n += 1 + sovTypes(uint64(m.I32))
	}
	if m.Ui32 != 0 {
		n += 1 + sovTypes(uint64(m.Ui32))
	}
	if m.F32 != 0 {
		n += 5
	}
	if m.F64 != 0 {
		n += 9
	}
	if m.Oth != nil {
		l = m.Oth.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Byts)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Enm != 0 {
		n += 1 + sovTypes(uint64(m.Enm))
	}
	if m.Sf32 != 0 {
		n += 5
	}
	if m.Sf64 != 0 {
		n += 9
	}
	if m.Si32 != 0 {
		n += 2 + sozTypes(uint64(m.Si32))
	}
	if m.Si64 != 0 {
		n += 2 + sozTypes(uint64(m.Si64))
	}
	if len(m.MapStrStr) > 0 {
		for k, v := range m.MapStrStr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + len(v) + sovTypes(uint64(len(v)))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.MapStrMsg) > 0 {
		for k, v := range m.MapStrMsg {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.MapI32Msg) > 0 {
		for k, v := range m.MapI32Msg {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTypes(uint64(l))
			}
			mapEntrySize := 1 + sovTypes(uint64(k)) + l
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.MapStrEnum) > 0 {
		for k, v := range m.MapStrEnum {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + sovTypes(uint64(v))
			n += mapEntrySize + 2 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.RStr) > 0 {
		for _, s := range m.RStr {
			l = len(s)
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RMsg) > 0 {
		for _, e := range m.RMsg {
			l = e.Size()
			n += 2 + l + sovTypes(uint64(l))
		}
	}
	if len(m.RI32) > 0 {
		l = 0
		for _, e := range m.RI32 {
			l += sovTypes(uint64(e))
		}
		n += 2 + sovTypes(uint64(l)) + l
	}
	if len(m.REnm) > 0 {
		l = 0
		for _, e := range m.REnm {
			l += sovTypes(uint64(e))
		}
		n += 2 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *Other) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Dbl != 0 {
		n += 9
	}
	if m.I64 != 0 {
		n += 1 + sovTypes(uint64(m.I64))
	}
	if m.B {
		n += 2
	}
	if m.Inenum != 0 {
		n += 1 + sovTypes(uint64(m.Inenum))
	}
	if m.Inmsg != nil {
		l = m.Inmsg.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OtherInnerMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Dbl != 0 {
		n += 9
	}
	if m.I64 != 0 {
		n += 1 + sovTypes(uint64(m.I64))
	}
	return n
}

func (m *Outer) Size() (n int) {
	var l int
	_ = l
	if m.In != nil {
		l = m.In.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Outer_Inner) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Dbl != 0 {
		n += 9
	}
	if m.I64 != 0 {
		n += 1 + sovTypes(uint64(m.I64))
	}
	if m.B {
		n += 2
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func (this *Simple) String() string {
	if this == nil {
		return "nil"
	}
	keysForMapStrStr := make([]string, 0, len(this.MapStrStr))
	for k, _ := range this.MapStrStr {
		keysForMapStrStr = append(keysForMapStrStr, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMapStrStr)
	mapStringForMapStrStr := "map[string]string{"
	for _, k := range keysForMapStrStr {
		mapStringForMapStrStr += fmt.Sprintf("%v: %v,", k, this.MapStrStr[k])
	}
	mapStringForMapStrStr += "}"
	keysForMapStrMsg := make([]string, 0, len(this.MapStrMsg))
	for k, _ := range this.MapStrMsg {
		keysForMapStrMsg = append(keysForMapStrMsg, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMapStrMsg)
	mapStringForMapStrMsg := "map[string]*Other{"
	for _, k := range keysForMapStrMsg {
		mapStringForMapStrMsg += fmt.Sprintf("%v: %v,", k, this.MapStrMsg[k])
	}
	mapStringForMapStrMsg += "}"
	keysForMapI32Msg := make([]int32, 0, len(this.MapI32Msg))
	for k, _ := range this.MapI32Msg {
		keysForMapI32Msg = append(keysForMapI32Msg, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMapI32Msg)
	mapStringForMapI32Msg := "map[int32]*Other{"
	for _, k := range keysForMapI32Msg {
		mapStringForMapI32Msg += fmt.Sprintf("%v: %v,", k, this.MapI32Msg[k])
	}
	mapStringForMapI32Msg += "}"
	keysForMapStrEnum := make([]string, 0, len(this.MapStrEnum))
	for k, _ := range this.MapStrEnum {
		keysForMapStrEnum = append(keysForMapStrEnum, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMapStrEnum)
	mapStringForMapStrEnum := "map[string]Myenum{"
	for _, k := range keysForMapStrEnum {
		mapStringForMapStrEnum += fmt.Sprintf("%v: %v,", k, this.MapStrEnum[k])
	}
	mapStringForMapStrEnum += "}"
	s := strings.Join([]string{`&Simple{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`Dbl:` + fmt.Sprintf("%v", this.Dbl) + `,`,
		`I64:` + fmt.Sprintf("%v", this.I64) + `,`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`Ui64:` + fmt.Sprintf("%v", this.Ui64) + `,`,
		`Flt:` + fmt.Sprintf("%v", this.Flt) + `,`,
		`I32:` + fmt.Sprintf("%v", this.I32) + `,`,
		`Ui32:` + fmt.Sprintf("%v", this.Ui32) + `,`,
		`F32:` + fmt.Sprintf("%v", this.F32) + `,`,
		`F64:` + fmt.Sprintf("%v", this.F64) + `,`,
		`Oth:` + strings.Replace(fmt.Sprintf("%v", this.Oth), "Other", "Other", 1) + `,`,
		`Byts:` + fmt.Sprintf("%v", this.Byts) + `,`,
		`Enm:` + fmt.Sprintf("%v", this.Enm) + `,`,
		`Sf32:` + fmt.Sprintf("%v", this.Sf32) + `,`,
		`Sf64:` + fmt.Sprintf("%v", this.Sf64) + `,`,
		`Si32:` + fmt.Sprintf("%v", this.Si32) + `,`,
		`Si64:` + fmt.Sprintf("%v", this.Si64) + `,`,
		`MapStrStr:` + mapStringForMapStrStr + `,`,
		`MapStrMsg:` + mapStringForMapStrMsg + `,`,
		`MapI32Msg:` + mapStringForMapI32Msg + `,`,
		`MapStrEnum:` + mapStringForMapStrEnum + `,`,
		`RStr:` + fmt.Sprintf("%v", this.RStr) + `,`,
		`RMsg:` + strings.Replace(fmt.Sprintf("%v", this.RMsg), "Other", "Other", 1) + `,`,
		`RI32:` + fmt.Sprintf("%v", this.RI32) + `,`,
		`REnm:` + fmt.Sprintf("%v", this.REnm) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Other) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Other{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`Dbl:` + fmt.Sprintf("%v", this.Dbl) + `,`,
		`I64:` + fmt.Sprintf("%v", this.I64) + `,`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`Inenum:` + fmt.Sprintf("%v", this.Inenum) + `,`,
		`Inmsg:` + strings.Replace(fmt.Sprintf("%v", this.Inmsg), "OtherInnerMsg", "OtherInnerMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OtherInnerMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OtherInnerMsg{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`Dbl:` + fmt.Sprintf("%v", this.Dbl) + `,`,
		`I64:` + fmt.Sprintf("%v", this.I64) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Outer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Outer{`,
		`In:` + strings.Replace(fmt.Sprintf("%v", this.In), "Outer_Inner", "Outer_Inner", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Outer_Inner) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Outer_Inner{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`Dbl:` + fmt.Sprintf("%v", this.Dbl) + `,`,
		`I64:` + fmt.Sprintf("%v", this.I64) + `,`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Simple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Simple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Simple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbl", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dbl = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			m.I64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.B = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ui64", wireType)
			}
			m.Ui64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ui64 |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flt", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Flt = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			m.I32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ui32", wireType)
			}
			m.Ui32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ui32 |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field F32", wireType)
			}
			m.F32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.F32 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F64", wireType)
			}
			m.F64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.F64 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Oth == nil {
				m.Oth = &Other{}
			}
			if err := m.Oth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Byts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Byts = append(m.Byts[:0], dAtA[iNdEx:postIndex]...)
			if m.Byts == nil {
				m.Byts = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enm", wireType)
			}
			m.Enm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enm |= (Myenum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf32", wireType)
			}
			m.Sf32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf32 = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sf64", wireType)
			}
			m.Sf64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sf64 = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Si32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Si32 = v
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Si64", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Si64 = int64(v)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapStrStr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapStrStr == nil {
				m.MapStrStr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapStrStr[mapkey] = mapvalue
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapStrMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapStrMsg == nil {
				m.MapStrMsg = make(map[string]*Other)
			}
			var mapkey string
			var mapvalue *Other
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Other{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapStrMsg[mapkey] = mapvalue
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapI32Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapI32Msg == nil {
				m.MapI32Msg = make(map[int32]*Other)
			}
			var mapkey int32
			var mapvalue *Other
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTypes
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Other{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapI32Msg[mapkey] = mapvalue
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapStrEnum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapStrEnum == nil {
				m.MapStrEnum = make(map[string]Myenum)
			}
			var mapkey string
			var mapvalue Myenum
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (Myenum(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapStrEnum[mapkey] = mapvalue
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RStr = append(m.RStr, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RMsg = append(m.RMsg, &Other{})
			if err := m.RMsg[len(m.RMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RI32 = append(m.RI32, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RI32 = append(m.RI32, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RI32", wireType)
			}
		case 25:
			if wireType == 0 {
				var v Myenum
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Myenum(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.REnm = append(m.REnm, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Myenum
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Myenum(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.REnm = append(m.REnm, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field REnm", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Other) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: other: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: other: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbl", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dbl = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			m.I64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.B = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inenum", wireType)
			}
			m.Inenum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inenum |= (OtherInnerenum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inmsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inmsg == nil {
				m.Inmsg = &OtherInnerMsg{}
			}
			if err := m.Inmsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherInnerMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: innerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: innerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbl", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dbl = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			m.I64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Outer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Outer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field In", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.In == nil {
				m.In = &Outer_Inner{}
			}
			if err := m.In.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Outer_Inner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dbl", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Dbl = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			m.I64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.I64 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.B = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("mixer/pkg/protobuf/yaml/testdata/all/types.proto", fileDescriptorTypes)
}

var fileDescriptorTypes = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6b, 0x1b, 0x49,
	0x10, 0x55, 0x6b, 0x34, 0xfa, 0x28, 0xc9, 0xb2, 0xdc, 0xf6, 0xee, 0xf6, 0x6a, 0x77, 0x67, 0x7b,
	0x05, 0x0b, 0xbd, 0x8b, 0x91, 0x96, 0x91, 0xd0, 0x06, 0x93, 0x40, 0x08, 0x0c, 0x58, 0x09, 0xb2,
	0xa1, 0x1d, 0xc8, 0x31, 0x48, 0x78, 0x24, 0x0f, 0xd6, 0xcc, 0x88, 0x99, 0x96, 0xc9, 0xdc, 0xf2,
	0x13, 0xf2, 0x0f, 0x72, 0xcd, 0x4f, 0xc9, 0xd1, 0xc7, 0x40, 0x2e, 0xb1, 0x72, 0xc9, 0xd1, 0x3f,
	0x21, 0x74, 0x8d, 0x65, 0x4b, 0xb2, 0x73, 0x48, 0xf0, 0x41, 0xf0, 0xea, 0xd1, 0xaf, 0xea, 0xf5,
	0xab, 0xd6, 0xc0, 0x7f, 0xbe, 0xf7, 0xca, 0x8d, 0x5a, 0xd3, 0xd3, 0x71, 0x6b, 0x1a, 0x85, 0x2a,
	0x1c, 0xce, 0x46, 0xad, 0x64, 0xe0, 0x4f, 0x5a, 0xca, 0x8d, 0xd5, 0xf1, 0x40, 0x0d, 0x5a, 0x83,
	0xc9, 0xa4, 0xa5, 0x92, 0xa9, 0x1b, 0x37, 0xf1, 0x00, 0x35, 0x46, 0x61, 0xd8, 0x28, 0x80, 0xe9,
	0xf8, 0x53, 0x95, 0x34, 0x3e, 0x16, 0x20, 0x7f, 0xe4, 0xf9, 0xd3, 0x89, 0x4b, 0x6b, 0x60, 0xc4,
	0x2a, 0x62, 0x84, 0x13, 0x51, 0x92, 0x1a, 0x6a, 0xe6, 0x78, 0x38, 0x61, 0x59, 0x4e, 0x04, 0x91,
	0x1a, 0x6a, 0xc6, 0xeb, 0x76, 0x98, 0xc1, 0x89, 0x30, 0xa4, 0x86, 0xb4, 0x02, 0x64, 0xc8, 0x72,
	0x9c, 0x88, 0xa2, 0x24, 0x43, 0x4a, 0x21, 0x37, 0xd3, 0x07, 0x4c, 0x4e, 0x44, 0x4e, 0x22, 0xd6,
	0x9a, 0xd1, 0x44, 0xb1, 0x3c, 0x27, 0x22, 0x2b, 0x35, 0xc4, 0x2e, 0x6d, 0x9b, 0x15, 0x38, 0x11,
	0xa6, 0xd4, 0x30, 0xd5, 0xb5, 0x6d, 0x56, 0xe4, 0x44, 0x6c, 0x48, 0xc4, 0xa8, 0x6b, 0xdb, 0xac,
	0xc4, 0x89, 0x28, 0x48, 0x0d, 0x91, 0xe9, 0x76, 0x18, 0x70, 0x22, 0xf2, 0x52, 0x43, 0xfa, 0x3b,
	0x18, 0xa1, 0x3a, 0x61, 0x65, 0x4e, 0x44, 0xd9, 0x86, 0xe6, 0x28, 0x0c, 0x9b, 0xa1, 0x3a, 0x71,
	0x23, 0xa9, 0x69, 0xdd, 0x75, 0x98, 0xa8, 0x98, 0x55, 0x38, 0x11, 0x15, 0x89, 0x98, 0xfe, 0x01,
	0x86, 0x1b, 0xf8, 0x6c, 0x83, 0x13, 0x51, 0xb5, 0xcb, 0xa8, 0xf0, 0x13, 0x37, 0x98, 0xf9, 0x52,
	0xf3, 0x5a, 0x12, 0xeb, 0xa9, 0x55, 0x4e, 0xc4, 0xa6, 0x44, 0x9c, 0x72, 0xdd, 0x0e, 0xdb, 0xe4,
	0x44, 0xd4, 0x24, 0x62, 0xe4, 0xb4, 0xe1, 0x1a, 0x27, 0x62, 0x4b, 0x22, 0x4e, 0xb9, 0x6e, 0x87,
	0x6d, 0x71, 0x22, 0xa8, 0x44, 0x4c, 0xf7, 0xa0, 0xec, 0x0f, 0xa6, 0x2f, 0x63, 0x15, 0xe9, 0x1f,
	0xa3, 0xdc, 0x10, 0x65, 0xbb, 0x8e, 0x63, 0xd3, 0xd8, 0x9b, 0xfd, 0xc1, 0xf4, 0x48, 0x45, 0x47,
	0x2a, 0x72, 0x02, 0x15, 0x25, 0xb2, 0xe4, 0x2f, 0xea, 0x65, 0xad, 0x1f, 0x8f, 0xd9, 0xf6, 0xb7,
	0xb4, 0xfd, 0x78, 0xbc, 0xa2, 0xed, 0xc7, 0xe3, 0x85, 0xd6, 0x6b, 0xdb, 0xa8, 0xdd, 0xb9, 0x53,
	0xdb, 0x6b, 0xdb, 0x2b, 0xda, 0xb4, 0xa6, 0x8f, 0xa0, 0xb2, 0x98, 0xab, 0x83, 0x61, 0x3f, 0xa1,
	0xf8, 0xb7, 0xdb, 0x83, 0x9d, 0x60, 0xe6, 0xa7, 0x6a, 0xf0, 0xaf, 0x09, 0xba, 0x0d, 0x66, 0x7a,
	0xd9, 0x9f, 0xb9, 0x21, 0x4a, 0x32, 0x87, 0x77, 0xf9, 0x53, 0x93, 0xda, 0xc9, 0x2f, 0xd8, 0x6c,
	0x79, 0x55, 0x39, 0x34, 0x8c, 0x2a, 0x9d, 0x28, 0xe3, 0x86, 0x30, 0x65, 0x2e, 0xea, 0xb5, 0x6d,
	0xca, 0x35, 0xa9, 0xd7, 0xf5, 0x2b, 0x37, 0xd6, 0xd7, 0x95, 0x8b, 0x9c, 0xc0, 0xaf, 0x3f, 0x84,
	0xea, 0x6a, 0x80, 0xfa, 0x91, 0x9c, 0xba, 0xc9, 0xe2, 0x19, 0x9f, 0xba, 0x09, 0xdd, 0x01, 0xf3,
	0x6c, 0x30, 0x99, 0xb9, 0xf8, 0x90, 0x4b, 0x32, 0x2d, 0xf6, 0xb2, 0x0f, 0x48, 0x7d, 0x7f, 0xa1,
	0x5e, 0xc4, 0x70, 0x87, 0x9a, 0x2f, 0xab, 0x57, 0x9d, 0xdf, 0xea, 0xb4, 0x14, 0xe8, 0x72, 0x27,
	0xf3, 0x7b, 0x3a, 0x3d, 0x85, 0xcd, 0xb5, 0x74, 0xef, 0x30, 0xf5, 0xd7, 0x72, 0xab, 0xb5, 0x60,
	0x6e, 0x7a, 0x35, 0xde, 0x66, 0xc1, 0xc4, 0x01, 0xf7, 0xf2, 0xe7, 0xde, 0x85, 0xbc, 0x17, 0xe0,
	0x8b, 0x30, 0x71, 0xea, 0xce, 0xcd, 0x05, 0x9a, 0x5e, 0x10, 0xb8, 0x11, 0x8e, 0xbf, 0x3a, 0x43,
	0xff, 0x01, 0xd3, 0x0b, 0xf4, 0xc6, 0xf3, 0x78, 0xdb, 0xed, 0xf5, 0xc3, 0xfd, 0x78, 0x2c, 0xd3,
	0x13, 0xf5, 0xc7, 0x50, 0x5c, 0x50, 0x3f, 0x66, 0xb4, 0xf1, 0x3f, 0x94, 0xae, 0x1d, 0xd0, 0x0a,
	0x14, 0x7b, 0x07, 0x07, 0x8e, 0x3c, 0x3c, 0x70, 0x6a, 0x99, 0xeb, 0xea, 0xf9, 0x8b, 0xc3, 0x1a,
	0xa1, 0x55, 0x80, 0xb4, 0xda, 0x97, 0x8e, 0x53, 0xcb, 0x36, 0xce, 0xc0, 0x3c, 0x9c, 0x29, 0x37,
	0xa2, 0x1c, 0xb2, 0x5e, 0x80, 0x63, 0xcb, 0x76, 0x0d, 0xbd, 0x22, 0xdf, 0xec, 0xe9, 0xb6, 0x32,
	0xeb, 0x05, 0xf5, 0x67, 0x60, 0x62, 0x71, 0x1f, 0x59, 0xfe, 0xfb, 0x37, 0xe4, 0xd3, 0x75, 0xd1,
	0x02, 0x18, 0xa9, 0xd1, 0x02, 0x18, 0xa9, 0xc7, 0x12, 0x98, 0x57, 0xf6, 0x9e, 0xec, 0x9e, 0x5f,
	0x58, 0x99, 0x0f, 0x17, 0x56, 0xe6, 0xf2, 0xc2, 0x22, 0xaf, 0xe7, 0x16, 0x79, 0x37, 0xb7, 0xc8,
	0xfb, 0xb9, 0x45, 0xce, 0xe7, 0x16, 0xf9, 0x34, 0xb7, 0xc8, 0x97, 0xb9, 0x95, 0xb9, 0x9c, 0x5b,
	0xe4, 0xcd, 0x67, 0x2b, 0x33, 0xcc, 0xe3, 0x17, 0xbe, 0xfd, 0x35, 0x00, 0x00, 0xff, 0xff, 0x39,
	0x68, 0x7a, 0x80, 0x15, 0x06, 0x00, 0x00,
}
